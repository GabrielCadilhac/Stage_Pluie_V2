// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct GPUTurbulence
{
    float3 pos;
    float size;
    float param;
    float strength;
    int type;
};

RWStructuredBuffer<GPUTurbulence> Turbulence;
RWStructuredBuffer<float3> Wind;

const int  NbTurbulence;
const float LocalWindStrength;
const uint3 GridSize;

float3 Cart2Cyl(float3 coord)
{
    const float PI = 3.1415926536;
    float r = sqrt(coord.x * coord.x + coord.y * coord.y);
    float theta = 0.;
    if (coord.x != 0.)
        theta = atan(coord.y / coord.x);
    else if (coord.y > 0.)
        theta = PI / 2.;
    else if (coord.y < 0.)
        theta = -PI / 2.;
    
    if (coord.x < 0.)
        theta += PI;
    
    return float3(r, theta, coord.z);
}

float3 Uniform(GPUTurbulence t, float3 op)
{
    op = abs(op);
    float3 dir = normalize(float3(-t.param, 0., 0.));
    return normalize((1. - op) * dir) * t.strength;
}

float3 SinkSource(GPUTurbulence t, float3 op)
{
    const float TWO_PI = 6.2831853072;
    float3 cylCoord = Cart2Cyl(op);
    cylCoord.x = t.param / (TWO_PI * t.size);
    return normalize(float3(cylCoord.x * cos(cylCoord.y), cylCoord.x * sin(cylCoord.y), sign(t.param) * cylCoord.z)) * t.strength;
}

float3 Vortex(GPUTurbulence t, float3 op)
{
    const float TWO_PI = 6.2831853072;
    float3 cylCoord = Cart2Cyl(op);
    cylCoord.y += t.param / (TWO_PI * t.size);
    return normalize(float3(cylCoord.x * cos(cylCoord.y), cylCoord.x * sin(cylCoord.y), -cylCoord.z)) * t.strength;
}

[numthreads(9,9,9)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint tid = GridSize.x * (id.y + GridSize.y * id.z) + id.x;
    float3 pos = ((float3) id.xyz) / 9.;
    float3 res = float3(0., 0., 0.);
    
    for (int i = 0; i < NbTurbulence; i++)
    {
        GPUTurbulence t = Turbulence[i];
        float3 op = pos - t.pos;
        if (length(op) < t.size)
        {
            if (t.type == 0)
                res += Uniform(t, op);
            else if (t.type == 1)
                res += Vortex(t, op);
            else
                res += SinkSource(t, op); 
        }
    }
    if (length(res) != 0.)
        res = normalize(res);
    
    Wind[tid] = res * LocalWindStrength;
}
